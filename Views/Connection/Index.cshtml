@{
    ViewData["Title"] = "SSH-Webkonsole";
}
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="utf-8" />
    <title>SSH-Webkonsole</title>
    <style>
        body {
            font-family: Consolas, monospace;
            background-color: #1e1e1e;
            color: #cccccc;
            margin: 0;
            padding: 0;
        }

        .toolbar {
            display: flex;
            align-items: center;
            padding: 15px;
            background-color: #2c2c2c;
            border-bottom: 1px solid #444;
            gap: 10px;
            flex-wrap: wrap;
        }

            .toolbar select,
            .toolbar button,
            .toolbar input[type="color"] {
                padding: 8px 12px;
                font-family: Consolas, monospace;
                font-size: 1em;
                border: none;
                border-radius: 4px;
            }

            .toolbar button {
                background-color: #3a3a3a;
                color: #fff;
                cursor: pointer;
                transition: background-color 0.2s ease;
            }

                .toolbar button:hover {
                    background-color: #555;
                }

            .toolbar label {
                color: #fff;
                font-size: 0.95em;
            }

        #terminal {
            background-color: #000;
            color: #0f0;
            padding: 10px;
            height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
            font-size: 0.8em;
        }

        .input-line {
            display: inline;
        }

        .cursor {
            display: inline-block;
            width: 10px;
            background-color: #0f0;
            animation: blink 1s step-start infinite;
        }

    </style>
</head>
<body>

    <div class="toolbar">
        <select id="serverSelect">
            <option value="">-- Server auswählen --</option>
        </select>
        <button id="connectionAddButton" title="Server hinzufügen">+</button>
        <button id="connectButton">Verbinden</button>
        <button id="disconnectButton">Trennen</button>
        <label for="colorPicker">Farbe:</label>
        <input type="color" id="colorPicker" value="#00ff00" />
    </div>

    <div id="terminal"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>

    <script>
        function loadServers() {
            $.getJSON("/connections", function (data) {
                const select = $('#serverSelect');
                select.empty();
                select.append('<option value="">-- Server auswählen --</option>');
                data.forEach(server => {
                    const option = $('<option>')
                        .val(server.value)
                        .text(server.name);
                    select.append(option);
                });
            }).fail(function () {
                alert("Fehler beim Laden der Serverliste.");
            });
        }

        $(function () {
            loadServers();

            const terminal = $('#terminal');
            const serverSelect = $('#serverSelect');
            const connectButton = $('#connectButton');
            const disconnectButton = $('#disconnectButton');
            const connectionAddButton = $('#connectionAddButton');
            const colorPicker = $('#colorPicker');

            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/ssh')
                .build();

            connection.start()
                .then(() => {
                    console.log("SignalR-Verbindung hergestellt");
                    appendPrompt();
                })
                .catch(err => console.error(err.toString()));

            connection.on('ReceiveOutput', function (message) {
                appendToTerminal(message);
            });

            connectButton.click(function () {
                const selectedServer = serverSelect.val();
                if (selectedServer.trim().length > 0) {
                    connection.invoke('Connect', selectedServer)
                        .catch(err => console.error(err.toString()));
                } else {
                    alert("Bitte wähle einen Server aus.");
                }
            });

            disconnectButton.click(function () {
                connection.invoke('Disconnect')
                    .catch(err => console.error(err.toString()));
            });

            connectionAddButton.click(function () {
                const serverName = prompt("Bitte gib den Namen des Servers ein:");
                const serverHost = prompt("Bitte gib die Host-Adresse ein:");
                const serverPort = parseInt(prompt("Bitte gib den Port ein (Standard: 22):") || "22", 10);
                const serverUsername = prompt("Benutzername:");
                const serverPassword = prompt("Passwort:");
                const serverSudoPassword = prompt("Sudo-Passwort (optional):");

                if (serverHost && serverPort && serverUsername && serverPassword) {
                    const newServer = {
                        Host: serverHost,
                        Port: serverPort,
                        Username: serverUsername,
                        Password: serverPassword,
                        SudoPassword: serverSudoPassword
                    };

                    $.ajax({
                        url: "/addServer",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(newServer),
                        success: function () {
                            alert("Server erfolgreich hinzugefügt.");
                            loadServers();
                        },
                        error: function (xhr) {
                            alert("Fehler beim Hinzufügen: " + xhr.responseText);
                        }
                    });
                    loadServers();
                } else {
                    alert("Bitte alle Pflichtfelder ausfüllen.");
                }
            });

            function appendToTerminal(text) {
                $('#input-line').before(document.createTextNode(text));
                scrollToBottom();
            }

            function appendPrompt() {
                terminal.append('$ ');
                const inputLine = $('<span id="input-line" class="input-line"></span>');
                const cursor = $('<span class="cursor">&nbsp;</span>');
                terminal.append(inputLine).append(cursor);
                scrollToBottom();
            }

            function scrollToBottom() {
                terminal.scrollTop(terminal[0].scrollHeight);
            }

            let commandBuffer = '';

            $(document).on('keydown', function (e) {
                const inputLine = $('#input-line');

                if (e.key === 'Backspace') {
                    e.preventDefault();
                    commandBuffer = commandBuffer.slice(0, -1);
                    inputLine.text(commandBuffer);
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    $('#input-line').remove();
                    $('.cursor').remove();
                    terminal.append('\n');
                    connection.invoke('SendCommand', commandBuffer)
                        .catch(err => console.error(err.toString()));
                    commandBuffer = '';
                    appendPrompt();
                } else if (e.key.length === 1 && !e.ctrlKey && !e.metaKey) {
                    e.preventDefault();
                    commandBuffer += e.key;
                    inputLine.text(commandBuffer);
                }
                scrollToBottom();
            });

            colorPicker.on('input', function () {
                const color = $(this).val();
                terminal.css('color', color);
                $('.cursor').css('background-color', color);
            });
        });
    </script>
</body>
</html>
