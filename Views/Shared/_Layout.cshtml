@using Microsoft.AspNetCore.Identity
@using SimplySH.Models
@using SimplySH.Models.Auth
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SimplySH</title>

    <!-- Styles -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/SimplySH.styles.css" asp-append-version="true" />
</head>
<body class="bg-light text-dark">
    <header>
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark px-3 shadow-sm">
            <a class="navbar-brand fw-bold" asp-area="" asp-controller="" asp-action="Index">SimplySH</a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarControls" aria-controls="navbarControls" aria-expanded="false" aria-label="Navigation ein-/ausblenden">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarControls">
                @if (SignInManager.IsSignedIn(User))
                {
                    <form class="d-flex align-items-center flex-wrap gap-2 w-100 me-auto">
                        <select id="serverSelect" class="form-select" style="max-width: 220px;">
                            <option value="">- Server auswählen -</option>
                        </select>
                        <button id="connectionAddButton" type="button" class="btn btn-secondary">+</button>
                        <button id="connectButton" type="button" class="btn btn-success">Verbinden</button>
                    </form>

                    <div class="dropdown ms-3">
                        <button class="btn btn-outline-light dropdown-toggle" type="button" id="dropdownSettings" data-bs-toggle="dropdown" aria-expanded="false">
                            Einstellungen
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end p-3" style="min-width: 220px;" aria-labelledby="dropdownSettings">
                            <li class="mb-2">
                                <label for="colorPicker" class="form-label mb-1">Farbe:</label>
                                <input type="color" id="colorPicker" value="#00ff00" class="form-control form-control-color border border-secondary w-100">
                            </li>
                            <li>
                                <label for="fontSizeRange" class="form-label mb-1">Schriftgröße:</label>
                                <input type="range" class="form-range" min="12" max="30" step="1" id="fontSizeRange">
                                <span id="fontSizeValue">16</span> px
                            </li>
                            <!-- Logout Button nur im Dropdown-Menü angezeigt -->
                            <li class="mt-3">
                                <form action="/Identity/Account/Logout" method="post" class="w-100">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-outline-danger w-100">Logout</button>
                                </form>
                            </li>
                        </ul>
                    </div>
                }
                else
                {
                    <div class="ms-auto d-flex gap-2">
                        <a class="btn btn-outline-light" asp-area="Identity" asp-page="/Account/Login">Login</a>
                        <a class="btn btn-outline-light" asp-area="Identity" asp-page="/Account/Register">Registrieren</a>
                    </div>
                }
            </div>
        </nav>
    </header>

    <main role="main" class="container my-4">
        @RenderBody()
    </main>

    @if (SignInManager.IsSignedIn(User))
    {
        <div class="container-fluid mb-5">
            <div id="terminal" class="border p-3 rounded" style="min-height: 300px; font-family: monospace; background-color: black; color: #00ff00;">
                <!-- Initiale Farbe ist #00ff00 -->
            </div>
        </div>
    }

    <!-- Scripts -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @if (SignInManager.IsSignedIn(User))
    {
        <script>
            function htmlEscape(text) {
                return text.replace(/[&<>"']/g, function (match) {
                    return {
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        "'": '&#039;'
                    }[match];
                });
            }

            function loadServers() {
                $.getJSON("/connections", function (data) {
                    const select = $('#serverSelect');
                    select.empty();
                    select.append('<option value="">- Server auswählen -</option>');
                    data.forEach(server => {
                        const option = $('<option>').val(server.value).text(server.name);
                        select.append(option);
                    });
                }).fail(function () {
                    alert("Fehler beim Laden der Serverliste.");
                });
            }

            $(function () {
                loadServers();

                const terminal = $('#terminal');
                const serverSelect = $('#serverSelect');
                const connectButton = $('#connectButton');
                const connectionAddButton = $('#connectionAddButton');
                const colorPicker = $('#colorPicker');
                const fontSizeRange = $('#fontSizeRange');
                const fontSizeValue = $('#fontSizeValue');

                const connection = new signalR.HubConnectionBuilder().withUrl('/ssh').build();

                connection.start()
                    .then(() => {
                        console.log("SignalR-Verbindung hergestellt");
                        initializeTerminal();
                    })
                    .catch(err => console.error(err.toString()));

                connection.on('ReceiveOutput', function (message) {
                    appendToTerminal(message);
                });

                connectButton.click(function () {
                    const selectedServer = serverSelect.val();
                    if (selectedServer.trim()) {
                        connection.invoke('Connect', selectedServer).catch(err => console.error(err.toString()));
                    } else {
                        alert("Bitte wähle einen Server aus.");
                    }
                });

                connectionAddButton.click(function () {
                    const serverHost = prompt("Host-Adresse:");
                    const serverPort = parseInt(prompt("Port (Standard: 22):") || "22", 10);
                    const serverUsername = prompt("Benutzername:");
                    const serverPassword = prompt("Passwort:");
                    const serverSudoPassword = prompt("Sudo-Passwort (optional):");

                    if (serverHost && serverPort && serverUsername && serverPassword) {
                        const newServer = {
                            Host: serverHost,
                            Port: serverPort,
                            Username: serverUsername,
                            Password: serverPassword,
                            SudoPassword: serverSudoPassword
                        };

                        $.ajax({
                            url: "addServer",
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(newServer),
                            success: function () {
                                alert(`Server hinzugefügt:\nHost: ${newServer.Host}\nPort: ${newServer.Port}`);
                                loadServers();
                            },
                            error: function (xhr) {
                                alert("Fehler beim Hinzufügen: " + xhr.responseText);
                            }
                        });
                    } else {
                        alert("Bitte alle Pflichtfelder ausfüllen.");
                    }
                });

                function appendToTerminal(text) {
                    $('#input-line').remove();
                    $('.cursor').remove();
                    terminal.append(htmlEscape(text));
                    appendPrompt();
                    scrollToBottom();
                }

                function appendPrompt() {
                    const inputLine = $('<span id="input-line" class="input-line"></span>');
                    const cursor = $('<span class="cursor">&nbsp;</span>').css({
                        'display': 'inline-block',
                        'width': '10px',
                        'background-color': colorPicker.val(),
                        'animation': 'blink 1s step-end infinite'
                    });
                    terminal.append(inputLine).append(cursor);
                    scrollToBottom();
                }

                function initializeTerminal() {
                    terminal.empty(); // Ensure terminal is clear
                    appendPrompt();  // Add initial prompt and cursor
                }

                function scrollToBottom() {
                    terminal.scrollTop(terminal[0].scrollHeight);
                }

                let commandBuffer = '';

                $(document).on('keydown', function (e) {
                    const inputLine = $('#input-line');
                    if (e.key === 'Backspace') {
                        e.preventDefault();
                        commandBuffer = commandBuffer.slice(0, -1);
                        inputLine.text(commandBuffer);
                    } else if (e.key === 'Enter' && commandBuffer.length > 0) {
                        e.preventDefault();
                        connection.invoke('SendCommand', commandBuffer).catch(err => console.error(err.toString()));
                        commandBuffer = '';
                        $('#input-line').remove();
                        $('.cursor').remove();
                        appendPrompt();
                    } else if (e.key.length === 1 && !e.ctrlKey && !e.metaKey) {
                        e.preventDefault();
                        commandBuffer += e.key;
                        inputLine.text(commandBuffer);
                    }
                    scrollToBottom();
                });

                // FARBE NUR TEXT
                colorPicker.on('input', function () {
                    const color = $(this).val();
                    terminal.css('color', color);
                    $('.cursor').css('background-color', color);
                });

                // Schriftgröße
                fontSizeRange.on('input', function () {
                    const size = $(this).val();
                    terminal.css('font-size', size + 'px');
                    fontSizeValue.text(size);
                });

                // Standardwerte setzen
                fontSizeRange.val(16);
                fontSizeValue.text(16);
            });
        </script>
    }

    @RenderSection("Scripts", required: false)
</body>
</html>
